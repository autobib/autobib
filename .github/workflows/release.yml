name: Release

on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"

# necessary to create releases.
permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUST_BACKTRACE: 1

jobs:
  # initialize the GitHub release itself
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Get the release version from the tag
        if: env.VERSION == ''
        shell: bash
        run: |
          VERSION_TAG="${{ github.ref_name }}"
          echo "VERSION=${VERSION_TAG:1}" >> $GITHUB_ENV

      - name: Show the version
        run: |
          echo "version is: $VERSION"

      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          PACKAGE_VERSION="$(yq '.package.version' Cargo.toml)"
          if [ "$PACKAGE_VERSION" != "$VERSION" ]; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi

      - name: Check that a changelog file with the correct name exists
        shell: bash
        run: |
          CHANGELOG_FILE="docs/changelog/${{ github.ref_name }}.md"
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "Changelog file not found!"
            exit 1
          fi
          echo "CHANGELOG_FILE=$CHANGELOG_FILE" >> $GITHUB_ENV

      - name: Show the changelog file
        run: |
          echo "changelog file is: $CHANGELOG_FILE"

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create ${{ github.ref_name }} --draft --verify-tag --title "Autobib $VERSION" --notes "$(tail -n +2 $CHANGELOG_FILE)"
    outputs:
     version: ${{ env.VERSION }}

  generate-license:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install cargo about
        shell: bash
        env:
          CARGO_ABOUT_VERSION: 0.8.0
          SHA256: "b53515a1c85f37810ae03ed03a984cde60282eb1fba08ad0888bd9a62f7d5629"
        run: |
          # Use the pre-compiled binary to reduce compilation time
          dir="$RUNNER_TEMP/about-download"
          about_root="cargo-about-$CARGO_ABOUT_VERSION-x86_64-unknown-linux-musl"
          url="https://github.com/EmbarkStudios/cargo-about/releases/download/$CARGO_ABOUT_VERSION/$about_root.tar.gz"
          echo "url is: $url"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO $url
          echo "$SHA256 $about_root.tar.gz" | sha256sum -c
          tar xf $about_root.tar.gz
          mv $about_root/cargo-about .
      - name: Generate license file
        shell: bash
        run: |
          cargo-about generate --config about/config.toml about/template.hbs > license.html
      - name: Archive license file
        uses: actions/upload-artifact@v4
        with:
          name: cargo-about-license-html
          path: |
            license.html

  upload-binary:
    needs: [create-release, generate-license]
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: false

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true

          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: false

          - os: windows-latest
            target: x86_64-pc-windows-gnu
            use-cross: false

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            use-cross: false

    env:
      CARGO: cargo

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use-cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Overwrite build command env variable
        if: matrix.use-cross
        shell: bash
        run: echo "CARGO=cross" >> $GITHUB_ENV

      - name: Install build deps (linux-musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build release binary
        shell: bash
        run: |
          ${{ env.CARGO }} build --verbose --release --locked --target ${{ matrix.target }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/autobib.exe"
          else
            bin="target/${{ matrix.target }}/release/autobib"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Strip release binary (macos)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: strip "$BIN"

      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=autobib-$version-${{ matrix.target }}" >> $GITHUB_ENV
      - name: Show variables
        shell: bash
        run: |
          echo "archive is: $ARCHIVE"
          echo "bin is: $BIN"

      - name: Download the license.html artifact
        uses: actions/download-artifact@v5
        with:
          name: cargo-about-license-html

      - name: Creating directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"
          cp "$BIN" "$ARCHIVE"/
          cp {README.md,COPYRIGHT,LICENSE,license.html} "$ARCHIVE"/
          cp "docs/changelog/${{ github.ref_name }}.md" "$ARCHIVE"/CHANGELOG.md

      - name: Build archive (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV
  
      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gh release upload "${{ github.ref_name }}" ${{ env.ASSET }} ${{ env.ASSET_SUM }}

  publish-crates-io:
    name: Publish release to crates.io
    runs-on: ubuntu-latest
    needs: [create-release, generate-license, upload-binary]
    steps:
     - uses: actions/checkout@v5
     - uses: dtolnay/rust-toolchain@stable
     - name: Publish release
       env:
         CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_PUBLISH_TOKEN }}
       run: cargo publish --dry-run
