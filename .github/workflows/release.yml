name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  # write permission is necessary to create releases.
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUST_BACKTRACE: 1
  RUST_VERSION: ${{ vars.RUST_VERSION }}

jobs:
  # initialize the GitHub release as a draft
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    environment: release

    steps:
      - uses: actions/checkout@v5

      - name: Get the release version from the tag
        if: env.VERSION == ''
        shell: bash
        run: |
          VERSION_TAG="${{ github.ref_name }}"
          echo "VERSION=${VERSION_TAG:1}" >> $GITHUB_ENV

      - name: Show the version
        run: |
          echo "version is: $VERSION"

      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          PACKAGE_VERSION="$(yq '.package.version' Cargo.toml)"
          if [[ "$PACKAGE_VERSION" != "$VERSION" ]]; then
            echo >&2 "version does not match Cargo.toml"
            exit 1
          fi

      - name: Check that a changelog file with the correct name exists
        shell: bash
        run: |
          CHANGELOG_FILE="docs/changelog/${{ github.ref_name }}.md"
          if [[ ! -f "$CHANGELOG_FILE" ]]; then
            echo >&2 "Changelog file not found!"
            exit 1
          fi
          echo "CHANGELOG_FILE=$CHANGELOG_FILE" >> $GITHUB_ENV

      - name: Show the changelog file
        run: |
          echo "changelog file is: $CHANGELOG_FILE"

      - name: Create draft GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }}	--prerelease --draft --verify-tag \
            --title "Autobib $VERSION" --notes "$(tail -n +2 $CHANGELOG_FILE)"
    outputs:
      version: ${{ env.VERSION }}

  generate-licenses:
    name: Collect and verify dependency licenses
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install cargo-about
        shell: bash
        env:
          CARGO_ABOUT_VERSION: 0.8.2
          SHA256: "3d0a79ce63391a9aa49504d347af03cb716ce9abe6a12673d005ccdf3d9a03f6"
        run: |
          # Use the pre-compiled binary to reduce compilation time
          dir="$RUNNER_TEMP/about-download"
          about_root="cargo-about-$CARGO_ABOUT_VERSION-x86_64-unknown-linux-musl"
          url="https://github.com/EmbarkStudios/cargo-about/releases/download/$CARGO_ABOUT_VERSION/$about_root.tar.gz"
          echo "url is: $url"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "$url"
          echo "$SHA256 $about_root.tar.gz" | sha256sum -c
          tar xf "$about_root.tar.gz"
          mv "$about_root/cargo-about" .

      - name: Generate licenses file
        shell: bash
        run: |
          cargo-about generate --config about/config.toml --output-file third-party-licenses.html \
            about/template.hbs

      - name: Create licenses file artifact
        uses: actions/upload-artifact@v4
        with:
          name: cargo-about-licenses-html
          path: |
            third-party-licenses.html

  upload-binary:
    name: Compile release binaries
    needs: [create-release, generate-licenses]
    runs-on: ${{ matrix.image }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - image: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - image: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - image: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu

          - image: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl

          - image: macos-latest
            target: aarch64-apple-darwin

          - image: macos-latest
            target: x86_64-apple-darwin

          - image: windows-latest
            target: x86_64-pc-windows-gnu

          - image: windows-latest
            target: x86_64-pc-windows-msvc

          - image: windows-11-arm
            target: aarch64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Install build deps (Linux musl)
        if: endsWith( matrix.target, '-unknown-linux-musl' )
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build release binary
        shell: bash
        run: |
          cargo build --verbose --release --locked --target ${{ matrix.target }}
          if [[ "${{ matrix.image }}" = "windows-latest" ]]; then
            bin="target/${{ matrix.target }}/release/autobib.exe"
          else
            bin="target/${{ matrix.target }}/release/autobib"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=autobib-$version-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show variables
        shell: bash
        run: |
          echo "archive is: $ARCHIVE"
          echo "bin is: $BIN"

      - name: Download licenses file artifact
        uses: actions/download-artifact@v5
        with:
          name: cargo-about-licenses-html

      - name: Create directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"
          cp "$BIN" "$ARCHIVE"/
          cp {README.md,COPYRIGHT,LICENSE,third-party-licenses.html} "$ARCHIVE"/
          cp "docs/changelog/${{ github.ref_name }}.md" "$ARCHIVE"/CHANGELOG.md

      - name: Build archive (Windows)
        shell: bash
        if: runner.os == 'Windows'
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

      - name: Build archive (Unix)
        shell: bash
        if: runner.os != 'Windows'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gh release upload "${{ github.ref_name }}" ${{ env.ASSET }} ${{ env.ASSET_SUM }}

  publish-crates-io:
    name: Publish release to crates.io
    needs: [create-release, generate-licenses, upload-binary]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v5
      - uses: rust-lang/crates-io-auth-action@v1
        id: auth
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - name: Publish release
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}
