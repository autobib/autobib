name: Rust

on:
  pull_request:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUST_BACKTRACE: 1

  REMOTES_FILE: tests/remotes.txt
  AUTOBIB_RESPONSE_CACHE_FILE: responses.dat
  CACHE_PREFIX: responses

jobs:
  prepare-response-cache:
    strategy:
      matrix:
        image: [ubuntu-latest, macos-latest, windows-latest]
    name: Prepare response cache
    uses: ./.github/workflows/response_cache.yml
    with:
      runner_image: ${{ matrix.image }}

  tests:
    strategy:
      matrix:
        image: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.image }}
    needs: prepare-response-cache
    steps:
    - name: Configure Git on Windows
      if: runner.os == 'Windows'
      run: git config --global core.autocrlf false
    - uses: actions/checkout@v5
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - name: Build test binaries
      run: cargo test --no-run --locked --features read_response_cache
    - name: Get cached response data
      id: response-cache-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.AUTOBIB_RESPONSE_CACHE_FILE }}
        key: ${{ env.CACHE_PREFIX }}-${{ matrix.image }}-${{ hashFiles(env.REMOTES_FILE) }}
    - name: Run tests
      run: cargo test --no-fail-fast --locked --features read_response_cache

  checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    - uses: Swatinem/rust-cache@v2
    - name: Build docs
      run: cargo doc --no-deps --locked
    - name: Run Clippy lints
      run: cargo clippy --locked
    - name: Check formatting
      run: cargo fmt --check
