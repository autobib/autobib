name: Rust

on:
  pull_request:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUST_BACKTRACE: 1

  REMOTES_FILE: tests/remotes.txt
  FLOWS_FILE: mitmproxy/flows

jobs:
  mitmproxy-flows:
    name: Prepare mitmproxy flows
    uses: ./.github/workflows/mitmdump.yml

  tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        toolchain: [stable]
    runs-on: ${{ matrix.os }}
    needs: mitmproxy-flows
    steps:
    - name: Configure Git on Windows
      if: runner.os == 'Windows'
      run: git config --global core.autocrlf false
    - uses: actions/checkout@v5
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - name: Build test binaries
      run: cargo test --no-run --locked
    - name: Get cached mitmproxy flows
      id: mitmproxy-cache-restore
      if: runner.os != 'Windows'
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.FLOWS_FILE }}
        key: mitmproxy-${{ hashFiles(env.REMOTES_FILE) }}
        enableCrossOsArchive: true
    - name: Fail on cache no-hit
      if: runner.os != 'Windows' && steps.mitmproxy-cache-restore.outputs.cache-hit != 'true'
      run: |
        echo 'Cache not found; see the previous step.'
        exit 1
    - name: Install mitmproxy
      if: runner.os != 'Windows'
      uses: ./.github/actions/install-mitmproxy
    - name: Start mitmdump
      if: runner.os != 'Windows'
      run: mitmdump --server-replay ${{ env.FLOWS_FILE }} --server-replay-reuse --set connection_strategy=lazy --server-replay-extra=kill &
    - name: Run tests
      if: runner.os != 'Windows'
      env:
        ALL_PROXY: http://127.0.0.1:8080
      run: cargo test --no-fail-fast --locked

  checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    - uses: Swatinem/rust-cache@v2
    - name: Build docs
      run: cargo doc --no-deps --locked
    - name: Run Clippy lints
      run: cargo clippy --locked
    - name: Check formatting
      run: cargo fmt --check
