name: Prepare mitmproxy flows

on:
  workflow_call:
  workflow_dispatch:

env:
  REMOTES_FILE: tests/remotes.txt
  FLOWS_FILE: mitmproxy/flows

jobs:
  lookup:
    name: Look up cache
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-flows-restore.outputs.cache-hit }}
      cache-primary-key: ${{ steps.cache-flows-restore.outputs.cache-primary-key }}
    steps:
    - uses: actions/checkout@v5
      with:
        sparse-checkout: |
          ${{ env.REMOTES_FILE }}
    - uses: actions/cache/restore@v4
      id: cache-flows-restore
      with:
        path: ${{ env.FLOWS_FILE }}
        key: ${{ runner.os }}-mitmproxy-${{ hashFiles(env.REMOTES_FILE) }}
        lookup-only: true

  generate:
    name: Generate
    runs-on: ubuntu-latest
    needs: lookup
    if: needs.lookup.outputs.cache-hit != 'true'
    steps:
    - uses: actions/checkout@v5
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - name: Check sorted
      run: sort -C ${{ env.REMOTES_FILE }}
    - name: Check no duplicates
      shell: bash
      run: test "$(cat ${{ env.REMOTES_FILE }} | uniq -d | wc -w)" -eq 0
    - run: cargo build
    - name: Install mitmproxy
      uses: ./.github/actions/install-mitmproxy
    - name: Start mitmdump
      run: mitmdump -w ${{ env.FLOWS_FILE }} &
    - name: Generate flows
      env:
        ALL_PROXY: http://127.0.0.1:8080
      run: xargs -a '${{ env.REMOTES_FILE }}' -d '\n' -- cargo run -- -vv get --retrieve-only --ignore-null
    - name: Save flows cache
      uses: actions/cache/save@v4
      with:
        path: ${{ env.FLOWS_FILE }}
        key: ${{ needs.lookup.outputs.cache-primary-key }}
